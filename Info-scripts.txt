devsculpt10@gmail.com

YOLO4010

------------------


-1er Script- 

El script creado tiene como objetivo obtener información sobre los activos disponibles como garantía (collateral) en la plataforma Bybit, así como sus tasas de financiamiento actuales.

Utiliza la API de Bybit para obtener una lista de activos que pueden ser utilizados como garantía (collateral) en la plataforma.

Utiliza la API de Bybit para obtener las tasas de financiamiento actuales para diferentes pares de activos.

Crea un DataFrame de pandas que combina la información de los activos disponibles como garantía y sus tasas de financiamiento actuales.

Se crea el DataFrame y lo imprime en la consola. Además, guarda el DataFrame en un archivo Excel (Vacio en mi caso por no tener activos en mi cuenta).

En resumen, Script útil para los que deseen monitorear y analizar las tasas de financiamiento actuales en Bybit, específicamente para los activos disponibles como garantía. La información recopilada puede ser valiosa para tomar decisiones informadas en el contexto de estrategias y gestión de activos.

----------------------------------------------------------------------

Credenciales de servicio de Google Sheets. 

- No las pude conseguir porque hasta un punto es pago, no quise poner mi tarjeta (se puede discutir).

----------------------------------------------------------------------

-2do Script-

Este script está diseñado para enviar un DataFrame de pandas a una hoja de cálculo de Google Sheets.

El DataFrame resultante contiene información sobre activos admitidos como garantía y sus tasas de financiamiento. 

Este DataFrame se imprime en la consola antes de enviarlo a Google Sheets, y también se puede verificar si está vacío antes de realizar la operación de envío.

----------------------------------------------------------------------

-3er Script-

Script integra datos de la API de Bybit y Google Sheets.

Chupa los datos sobre activos admitidos como garantía y sus tasas de financiamiento, crea un DataFrame con estos datos y luego envía ese DataFrame a una hoja de cálculo de Google Sheets.

Es útil para monitorear y registrar información en google sheet desde un entorno de Python.


----------------------------------------------------------------------

-3er Script-

- Obtiene la lista de todas las monedas disponibles en Bybit a través de la API v2.
- Para cada moneda en la lista, utiliza la API v5 para obtener información sobre préstamos (borrowing) en Bybit.
- Muestra los datos de préstamos (borrowing) para cada moneda que tenga información disponible.

El resultado que estás viendo indica que el DataFrame tiene una sola fila y 322 columnas. La columna única se llama 'vipCoinList', y cada celda en esa columna contiene una lista de diccionarios que representa los datos de préstamo para una moneda específica.


-Script BorrowingData- (Lista VIP de Victor)

- Dirigido a obtener información de préstamos (borrowing) para trading con margen y spot.
- Dtiliza el endpoint de la API de trading con margen y spot de Bybit: https://api.bybit.com/v5/spot-margin-trade/data.
- Se enfoca en obtener información más general sobre préstamos y trading con margen en pares de trading de spot y margen.

-Script BorrowingDataFuturos- (Lo que dijo Diego)

- El primer script recopila el borrowing de los contratos de futuros.
- Obtiene información relacionada con préstamos de contratos de futuros, utiliza el endpoint y la estructura de datos asociados con esos contratos.
- Se enfoca en obtener información sobre los borrowing para contratos de futuros específicos.


-Script BorrowingYearToExcel- 

El script automatiza la recopilación y organización de datos sobre tasas de préstamo para diferentes monedas.
- hourlyBorrowRate es la tasa de préstamo por hora (aprox).
- annualBorrowRate es la tasa de préstamo anualizada.
- annualBorrowRatePercentage es la misma tasa anualizada expresada como un porcentaje.


# Define tus claves API aquí
API_KEY = "JT1y5FvxnyjqfVvVHs"
API_SECRET = "vw14SB2Qw6vhMLs7Da9F4QsP2V6jtK4mcTA6"




-Blockchain Developer -

Blockchain Developer
YOLO · Profesional independienteYOLO · Profesional independiente
ene. 2024 - actualidad · 2 mesesene. 2024 - actualidad · 2 meses
Montevideo, Uruguay · En remotoMontevideo, Uruguay · En remoto

Blockchain Developer with experience in designing and implementing blockchain-based applications. Proficient in programming languages such as Python and Javascript. Key skills include smart contract development, integration of blockchain technology into existing systems, and ensuring transaction security. work on financial process automation. Ability to collaborate effectively with cross-functional teams to achieve project goals.

Key Skills:

Smart Contract Development.
Cryptocurrency API Integration.
Financial Data Analysis.
Large Dataset Manipulation.
Blockchain Solution Development.
Financial Process Automation.
Collaboration on Cryptocurrency Projects.


-Mensaje motivacional para companias-

Embracing my passion for creativity and innovation, I aspire to work as a Frontend Developer in this company. 

Crafting visually appealing and functional interfaces is not just a job for me – it's a daily drive. I am seeking an environment that fosters collaboration and constant challenges, enabling my professional growth while contributing to technological advancement and enhancing user experiences.

 I am ready to be part of the digital future, making a difference with every line of code I write!"


 var API_KEY = "QtSxI1sVsGpnygrxwl";
 var API_SECRET = "bUjOk7i1uZBmd3ZBYI1qELCLwojidhMuqCwf";



- Script Apps Script -

borrowable, collateralRatio, currency, hourlyBorrowRate, liquidationOrder, marginCollateral, y maxBorrowingAmount, annualBorrowRate.

{
  "ETH": {
    "borrowable": true,
    "collateralRatio": "0.95",
    "currency": "ETH",
    "hourlyBorrowRate": "0.0000026612540000",
    "liquidationOrder": "3",
    "marginCollateral": true,
    "maxBorrowingAmount": "300",
    "annualBorrowRate": "0.006426004"
  }
}

---------------------------------------------

function escribirDatosEnHoja(dataSets) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName("Datos de Préstamos");

  // Encabezados de columna
  var headers = ["Moneda", "Prestable", "Relación de Colateral", "Tasa de Interés Horaria", "Orden de Liquidación", "Colateral Marginal", "Monto Máximo de Préstamo", "Tasa de Interés Anual"];

  // Asegúrate de que la hoja tenga los encabezados
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);

  // Escribe los datos en la hoja de cálculo
  for (var i = 0; i < dataSets.length; i++) {
    var rowData = [
      dataSets[i].currency,
      dataSets[i].borrowable,
      dataSets[i].collateralRatio,
      dataSets[i].hourlyBorrowRate,
      dataSets[i].liquidationOrder,
      dataSets[i].marginCollateral,
      dataSets[i].maxBorrowingAmount,
      dataSets[i].annualBorrowRate
    ];

    sheet.appendRow(rowData);
  }
}


function jsonToDataArray(json) {
  function flattenObject(ob) {
    var result = {};
    for (var i in ob) {
      if ((typeof ob[i]) === 'object' && !Array.isArray(ob[i])) {
        var temp = flattenObject(ob[i]);
        for (var j in temp) {
          result[i + '.' + j] = temp[j];
        }
      } else {
        result[i] = ob[i];
      }
    }
    return result;
  }

  if (typeof json === 'object') {
    var flatObject = flattenObject(json);
    var keys = Object.keys(flatObject);
    var data = keys.map(function(key) {
      return flatObject[key];
    });

    console.log("Datos procesados correctamente:", JSON.stringify(data, null, 2));  // Agregado para depurar

    return { data: [data], keys: keys };  // Nota: Se envuelve 'data' en un array para mantener la consistencia con la estructura de salida de jsonToDataArray
  } else {
    console.error("El argumento no es un objeto JSON válido.");
    return null;
  }
}

function obtenerDatosBorrowing() {
  var API_KEY = "JT1y5FvxnyjqfVvVHs";
  var API_SECRET = "vw14SB2Qw6vhMLs7Da9F4QsP2V6jtK4mcTA6";

  var monedas = ['USDT', 'BTC', 'ETH'];

  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName("Datos de Préstamos");


   var dataSets = []; // Almacena todos los conjuntos de datos

  for (var i = 0; i < monedas.length; i++) {
    var symbol = monedas[i];
    var borrowingData = obtenerDatosBorrowingPorMoneda(symbol, API_KEY, API_SECRET);

    if (borrowingData && borrowingData.result && borrowingData.result.vipCoinList && borrowingData.result.vipCoinList[0] && borrowingData.result.vipCoinList[0].list) {
      console.log("Datos completos para " + symbol + ":", borrowingData);

      var listData = borrowingData.result.vipCoinList[0].list;

      if (listData.length > 0) {
        for (var rowIndex = 0; rowIndex < listData.length; rowIndex++) {
          var rowData = listData[rowIndex];
          var dataSet = {
            currency: rowData.currency,
            borrowable: rowData.borrowable,
            collateralRatio: rowData.collateralRatio,
            hourlyBorrowRate: rowData.hourlyBorrowRate,
            liquidationOrder: rowData.liquidationOrder,
            marginCollateral: rowData.marginCollateral,
            maxBorrowingAmount: rowData.maxBorrowingAmount,
            annualBorrowRate: rowData.hourlyBorrowRate * 24 * 365
          };

          dataSets.push(dataSet); // Agrega el conjunto de datos al arreglo
        }
      } else {
        console.error("La lista de préstamos para " + symbol + " está vacía.");
      }
    } else {
      console.error("No se pudieron obtener los datos de borrowing para " + symbol + ".");
      if (borrowingData) {
        console.error("Datos obtenidos:", borrowingData);
      }
    }
  }

  console.log("Todos los dataSets:", dataSets); // Muestra todos los conjuntos de datos al final

  escribirDatosEnHoja(dataSets); // Escribe los datos en la hoja de cálculo
}


function obtenerDatosBorrowingPorMoneda(symbol, apiKey, apiSecret) {
  var endpoint = 'https://oracle.yolodc.com/relay?url=https://api.bybit.com/v5/spot-margin-trade/data';

  try {
    var coin = symbol.slice(0, -4);
    var timestamp = new Date().getTime();
    var queryParams = 'timestamp=' + timestamp + '&api_key=' + apiKey + '&coin=' + coin;
    var message = 'GET ' + endpoint + '?' + queryParams;
    var signature = Utilities.computeHmacSha256Signature(message, apiSecret);
    var signatureHex = Utilities.base64Encode(signature);
    var headers = {
      'api-key': apiKey,
      'timestamp': timestamp,
      'sign': signatureHex
    };

    var options = {
      'method': 'get',
      'headers': headers
    };

    var response = UrlFetchApp.fetch(endpoint + '?' + queryParams, options);

    var responseCode = response.getResponseCode();
    var contentText = response.getContentText();

    if (responseCode === 200) {
      try {
        var responseData = JSON.parse(contentText);
        return responseData;
      } catch (e) {
        console.error("Error al analizar la respuesta JSON para " + coin + ": " + e);
        console.error("Respuesta JSON no válida:", contentText);
        return null;
      }
    } else {
      console.error("Error en la solicitud para " + coin + ". Código de estado: " + responseCode);
      console.error("Mensaje de error:", contentText);
      return null;
    }
  } catch (error) {
    console.error("Error general en la solicitud para " + coin + ": " + error);
    return null;
  }
}




- EL FUCKING ALGORITMO POSTA -

function escribirDatosEnHoja(dataSets) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName("Datos de Préstamos");

  // Encabezados de columna, incluyendo la nueva columna
  var headers = ["Moneda", "Prestable", "Relación Colateral", "Tasa de Interés Horaria", "Orden de Liquidación", "Garantía Adicional", "Monto Máximo de Préstamo", "Tasa de Interés Anual", "Tasa de Interés Anual (%)"];

  // Asegúrate de que la hoja tenga los encabezados
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);

  // Escribe los datos en la hoja de cálculo
  for (var i = 0; i < dataSets.length; i++) {
    var rowData = [
      dataSets[i].currency,
      dataSets[i].borrowable,
      dataSets[i].collateralRatio,
      dataSets[i].hourlyBorrowRate,
      dataSets[i].liquidationOrder,
      dataSets[i].marginCollateral,
      dataSets[i].maxBorrowingAmount,
      dataSets[i].annualBorrowRate,
      dataSets[i].annualBorrowRate * 100
    ];
    sheet.appendRow(rowData);
  }
}

function jsonToDataArray(json) {
  function flattenObject(ob) {
    var result = {};
    for (var i in ob) {
      if ((typeof ob[i]) === 'object' && !Array.isArray(ob[i])) {
        var temp = flattenObject(ob[i]);
        for (var j in temp) {
          result[i + '.' + j] = temp[j];
        }
      } else {
        result[i] = ob[i];
      }
    }
    return result;
  }

  if (typeof json === 'object') {
    var flatObject = flattenObject(json);
    var keys = Object.keys(flatObject);
    var data = keys.map(function(key) {
      return flatObject[key];
    });

    console.log("Datos procesados correctamente:", JSON.stringify(data, null, 2));  // Agregado para depurar

    return { data: [data], keys: keys };  // Nota: Se envuelve 'data' en un array para mantener la consistencia con la estructura de salida de jsonToDataArray
  } else {
    console.error("El argumento no es un objeto JSON válido.");
    return null;
  }
}

function obtenerDatosBorrowing() {
   var API_KEY = "QtSxI1sVsGpnygrxwl";
  var API_SECRET = "bUjOk7i1uZBmd3ZBYI1qELCLwojidhMuqCwf";

  var monedas = ['USDT', 'BTC', 'ETH'];

  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = spreadsheet.getSheetByName("Datos de Préstamos");


   var dataSets = []; // Almacena todos los conjuntos de datos

  for (var i = 0; i < monedas.length; i++) {
    var symbol = monedas[i];
    var borrowingData = obtenerDatosBorrowingPorMoneda(symbol, API_KEY, API_SECRET);

    if (borrowingData && borrowingData.result && borrowingData.result.vipCoinList && borrowingData.result.vipCoinList[0] && borrowingData.result.vipCoinList[0].list) {
      console.log("Datos completos para " + symbol + ":", borrowingData);

      var listData = borrowingData.result.vipCoinList[0].list;

      if (listData.length > 0) {
        for (var rowIndex = 0; rowIndex < listData.length; rowIndex++) {
          var rowData = listData[rowIndex];
          var dataSet = {
            currency: rowData.currency,
            borrowable: rowData.borrowable,
            collateralRatio: rowData.collateralRatio,
            hourlyBorrowRate: rowData.hourlyBorrowRate,
            liquidationOrder: rowData.liquidationOrder,
            marginCollateral: rowData.marginCollateral,
            maxBorrowingAmount: rowData.maxBorrowingAmount,
            annualBorrowRate: rowData.hourlyBorrowRate * 24 * 365
          };

          dataSets.push(dataSet); // Agrega el conjunto de datos al arreglo
        }
      } else {
        console.error("La lista de préstamos para " + symbol + " está vacía.");
      }
    } else {
      console.error("No se pudieron obtener los datos de borrowing para " + symbol + ".");
      if (borrowingData) {
        console.error("Datos obtenidos:", borrowingData);
      }
    }
  }

  console.log("Todos los dataSets:", dataSets); // Muestra todos los conjuntos de datos al final

  escribirDatosEnHoja(dataSets); // Escribe los datos en la hoja de cálculo
}


function obtenerDatosBorrowingPorMoneda(symbol, apiKey, apiSecret) {
  var endpoint = 'https://oracle.yolodc.com/relay?url=https://api.bybit.com/v5/spot-margin-trade/data';

  try {
    var coin = symbol.slice(0, -4);
    var timestamp = new Date().getTime();
    var queryParams = 'timestamp=' + timestamp + '&api_key=' + apiKey + '&coin=' + coin;
    var message = 'GET ' + endpoint + '?' + queryParams;
    var signature = Utilities.computeHmacSha256Signature(message, apiSecret);
    var signatureHex = Utilities.base64Encode(signature);
    var headers = {
      'api-key': apiKey,
      'timestamp': timestamp,
      'sign': signatureHex
    };

    var options = {
      'method': 'get',
      'headers': headers
    };

    var response = UrlFetchApp.fetch(endpoint + '?' + queryParams, options);

    var responseCode = response.getResponseCode();
    var contentText = response.getContentText();

    if (responseCode === 200) {
      try {
        var responseData = JSON.parse(contentText);
        return responseData;
      } catch (e) {
        console.error("Error al analizar la respuesta JSON para " + coin + ": " + e);obtee
        console.error("Respuesta JSON no válida:", contentText);
        return null;
      }
    } else {
      console.error("Error en la solicitud para " + coin + ". Código de estado: " + responseCode);
      console.error("Mensaje de error:", contentText);
      return null;
    }
  } catch (error) {
    console.error("Error general en la solicitud para " + coin + ": " + error);
    return null;
  }
}




Este código en Python realiza las siguientes acciones:

Realiza una solicitud a la API de Bybit para obtener datos de financiamiento (funding) de contratos lineales.
Realiza una solicitud a la API de Bybit para obtener datos de préstamos (borrowing) en el mercado de spot y margen.
Filtra los símbolos que están presentes tanto en los datos de financiamiento como en las tasas de préstamos.
Crea un archivo de Excel llamado "datos_funding_borrowing.xlsx".
Itera sobre los símbolos filtrados y agrega información sobre el par de trading, la tasa de financiamiento y los datos de préstamo a la hoja de cálculo del archivo Excel.
Guarda el archivo Excel con los datos recopilados.
En resumen, este código recopila información sobre tasas de financiamiento y préstamos para pares de trading específicos en Bybit y la almacena en un archivo Excel.



